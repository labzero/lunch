# JOB DEFINITIONS
version: 2.1
orbs:
  node: circleci/node@5.1.0
commands:
  aws-deploy:
    parameters:
      build_container_repository:
        type: env_var_name
        default: BUILD_CONTAINER_REPOSITORY
      ecs_cluster:
        type: string
        default: ""
      migration_task:
        type: string
        default: ""
      service_name:
        type: string
        default: ""
      task_family:
        type: string
        default: ""
    steps:
      - run:
          name: Deploy
          command: |
            aws configure set default.region us-west-2
            CLEAN_BRANCH=`echo ${CIRCLE_BRANCH} | sed 's/\//-/g'`
            DOCKER_TAG=${<< parameters.build_container_repository >>}:${CIRCLE_SHA1}
            CURRENT_TASK=`aws ecs list-task-definitions --status ACTIVE --family-prefix << parameters.task_family >> --sort DESC | jq -r '.taskDefinitionArns[0]'`
            TASK_JSON=`aws ecs describe-task-definition --task-definition ${CURRENT_TASK} | jq --arg DOCKER_TAG "$DOCKER_TAG" '.taskDefinition.containerDefinitions[0].image = $DOCKER_TAG | {containerDefinitions: .taskDefinition.containerDefinitions, family: .taskDefinition.family}'`
            aws ecs register-task-definition --cli-input-json "${TASK_JSON}" > /dev/null
            CURRENT_MIGRATION_TASK=`aws ecs list-task-definitions --status ACTIVE --family-prefix << parameters.migration_task >> --sort DESC | jq -r '.taskDefinitionArns[0]'`
            MIGRATION_TASK_JSON=`aws ecs describe-task-definition --task-definition ${CURRENT_MIGRATION_TASK} | jq --arg DOCKER_TAG "$DOCKER_TAG" '.taskDefinition.containerDefinitions[0].image = $DOCKER_TAG | {containerDefinitions: .taskDefinition.containerDefinitions, family: .taskDefinition.family}'`
            aws ecs register-task-definition --cli-input-json "${MIGRATION_TASK_JSON}" > /dev/null
            aws ecs run-task --cluster << parameters.ecs_cluster >> --task-definition << parameters.migration_task >>
            NEW_TASK=`aws ecs list-task-definitions --status ACTIVE --family-prefix << parameters.task_family >> --sort DESC | jq -r '.taskDefinitionArns[0]'`
            aws ecs update-service --service << parameters.service_name >> --cluster << parameters.ecs_cluster >> --task-definition ${NEW_TASK}

jobs:
  test:
    docker:
      # image for running tests
      - image: cypress/browsers:node18.12.0-chrome103-ff107
        environment:
          - DB_NAME=lunch_test
          - DB_USER=lunch_test
          - DB_PASS=lunch_test
          - DB_HOST=localhost
          - SUPERUSER_NAME=test
          - SUPERUSER_PASSWORD=test
          - SUPERUSER_EMAIL=test@lunch.pink

      # service image for database for functional tests
      - image: postgres:14.5
        environment:
          - POSTGRES_USER=lunch_test
          - POSTGRES_DB=lunch_test
          - POSTGRES_PASSWORD=lunch_test

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: dotenv
          command: touch .env && touch .env.prod && touch .env.test

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-test-dependencies-{{ checksum "package.json" }}

      # install deps
      - run:
          name: yarn-install
          command: yarn install

      - save_cache:
          paths:
            - node_modules
            - ~/.cache
          key: v1-test-dependencies-{{ checksum "package.json" }}

      # run unit tests
      - run: mkdir ~/repo/junit

      - run:
          name: unit-tests
          command: npm run test-ci
          environment:
            MOCHA_FILE: junit/unit-test-results.xml

      - run:
          name: setup /etc/hosts
          command: |
            echo 127.0.0.1 local.lunch.pink | tee -a /etc/hosts
            echo 127.0.0.1 integration-test.local.lunch.pink | tee -a /etc/hosts

      # build the app
      # - run:
      #     name: build-release
      #     command: NODE_ENV=test npm run build

      - run:
          name: integration-tests
          command: NODE_ENV=test npm run integration-test-ci
          environment:
            MOCHA_FILE: junit/browser-test-results.xml

      - store_test_results:
          path: ~/repo/junit

      - store_artifacts:
          path: ~/repo/junit

      - store_artifacts:
          path: ~/repo/screenshots

  build:
    docker:
      - image: cimg/aws:2023.01

    # working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true

      - run:
          name: dotenv
          command: touch .env && touch .env.prod

      # # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       - v1-build-dependencies-{{ checksum "package.json" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v1-build-dependencies-

      # # install deps
      # - run:
      #     name: yarn-install
      #     command: yarn install

      # - save_cache:
      #     paths:
      #       - node_modules
      #     key: v1-build-dependencies-{{ checksum "package.json" }}

      - node/install-packages:
          pkg-manager: yarn

      # build the release
      - run:
          name: build-release
          command: npm run build -- --release --verbose

      # - setup_remote_docker

      # build and push a docker image
      - run:
          name: build-docker-image
          command: |
            CLEAN_BRANCH=`echo $CIRCLE_BRANCH | sed 's/\//-/g'`
            DOCKER_TAG=${BUILD_CONTAINER_REPOSITORY}:${CIRCLE_SHA1}
            docker build --tag ${DOCKER_TAG} .
            aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${CONTAINER_REGISTRY}
            docker push ${DOCKER_TAG}

  deploy-staging:
    docker:
      - image: cimg/aws:2023.01

    # working_directory: ~/repo

    steps:
      - aws-deploy:
          task_family: lunch-staging
          ecs_cluster: Lunch-Staging
          service_name: lunch-staging
          migration_task: staging_lunch_migrate

  deploy-production:
    docker:
      - image: cimg/aws:2023.01

    # working_directory: ~/repo

    steps:
      - aws-deploy:
          task_family: lunch
          ecs_cluster: Lunch
          service_name: lunch-production
          migration_task: lunch_migrate

# WORKFLOW DEFINITIONS
workflows:
  version: 2

  commit:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - develop
                - master

  develop-test-deploy:
    jobs:
      - test:
          filters:
            branches:
              only: develop

      - build:
          requires:
            - test
          filters:
            branches:
              only: develop

      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only: develop

  deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /^lunch-v.*/
            branches:
              ignore: /.*/

      - deploy-staging:
          requires:
            - build
          filters:
            tags:
              only: /^lunch-v.*/
            branches:
              ignore: /.*/
      - hold:
          type: approval
          requires:
            - deploy-staging
          filters:
            tags:
              only: /^lunch-v.*/
            branches:
              ignore: /.*/

      - deploy-production:
          requires:
            - hold
          filters:
            tags:
              only: /^lunch-v.*/
            branches:
              ignore: /.*/
