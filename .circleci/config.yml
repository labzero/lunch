# JOB DEFINITIONS
version: 2
jobs:
  test:
    docker:
      # image for running tests
      - image: circleci/node:8.1-browsers
        environment:
          - DB_NAME=lunch_test
          - DB_USER=lunch_test
          - DB_PASS=
          - DB_HOST=localhost
          - SUPERUSER_NAME=test
          - SUPERUSER_PASSWORD=test
          - SUPERUSER_EMAIL=test@lunch.pink

      # service image for database for functional tests
      - image: postgres:9.6
        environment:
        - POSTGRES_USER=lunch_test
        - POSTGRES_DB=lunch_test

    working_directory: ~/repo

    steps:

      - checkout

      - run:
          name: dotenv
          command: touch .env && touch .env.prod && touch .env.test


      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      # install deps
      - run:
          name: yarn-install
          command: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # run unit tests
      - run: mkdir ~/repo/junit

      - run:
          name: unit-tests
          command: npm run test-ci
          environment:
            MOCHA_FILE: junit/unit-test-results.xml

      # set up for integration tests
      # set up the database
      - run:
          name: database-setup
          command: NODE_ENV=test npm run integration-setup

      - run:
          name: setup /etc/hosts
          command: |
            echo 127.0.0.1 local.lunch.pink | sudo tee -a /etc/hosts
            echo 127.0.0.1 integration-test.local.lunch.pink | sudo tee -a /etc/hosts

      # build the app
      - run:
          name: build-release
          command: NODE_ENV=test npm run build

      - run:
          name: start-server
          command: NODE_ENV=test npm run serve
          background: true

      - run:
          name: integration-tests
          command: NODE_ENV=test npm run integration-test-ci
          environment:
            MOCHA_FILE: junit/browser-test-results.xml

      - store_test_results:
          path: ~/repo/junit

      - store_artifacts:
          path: ~/repo/junit

  build:
    docker:
      - image: ${BUILD_IMAGE}

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: dotenv
          command: touch .env && touch .env.prod

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      # install deps
      - run:
          name: yarn-install
          command: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # build the release
      - run:
          name: build-release
          command: npm run build -- --release --verbose

      - setup_remote_docker

      # build and push a docker image (script is defined in the custom build image)
      - run:
          name: build-docker-image
          command: ../buildImage.sh


  deploy-staging:

    docker:
      - image: ${BUILD_IMAGE}

    working_directory: ~/repo

    steps:

      # update ECS task and service with image build above (script is defined in custom build image)
      - run:
          name: update-service
          command: ../deployStaging.sh

  deploy-production:

    docker:
      - image: ${BUILD_IMAGE}

    working_directory: ~/repo

    steps:
      - run:
          name: update_service
          command: ../deployProduction.sh

# WORKFLOW DEFINITIONS
workflows:
  version: 2

  commit:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - develop
                - master

  develop-test-deploy:
    jobs:
      - test:
          filters:
            branches:
              only: develop

      - build:
          requires:
            - test
          filters:
            branches:
              only: develop

      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only: develop

  deploy:
    jobs:

      - build:
          filters:
            tags:
              only: /^lunch-v.*/
            branches:
              ignore: /.*/

      - deploy-staging:
          requires:
            - build
          filters:
            tags:
              only: /^lunch-v.*/
            branches:
              ignore: /.*/
      - hold:
          type: approval
          requires:
            - deploy-staging
          filters:
            tags:
              only: /^lunch-v.*/
            branches:
              ignore: /.*/

      - deploy-production:
          requires:
            - hold
          filters:
            tags:
              only: /^lunch-v.*/
            branches:
              ignore: /.*/



